generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ambassador {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  name               String

  isDeleted          Boolean             @default(false)
  promoCode          String?

  channelTypeId      String
  subscriberId       String

  rooms              AmbassadorRoom[]
  Events    Event[]
}

model Room {
  id                        String      @id @default(uuid())
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  name                      String

  pendingSubscriptionId     String
  approvedSubscriptionId    String
  rejectedSubscriptionId    String

  webhookUrl                String
  secretKey                 String

  isDeleted                 Boolean    @default(false)

  senlerChannelId           Int

  sprints                   Sprint[]
  ambassadors               AmbassadorRoom[]
  events                    Event[]
}

model Sprint {
  id                      String              @id @default(uuid())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  name                    String

  endDate                 DateTime?           @db.Date
  startDate               DateTime?           @db.Date

  promoCodeUsagesCount    Int                 @default(0)
  promoCodeUsageLimit     Int?

  isDeleted               Boolean             @default(false)

  rewardType              RewardType
  rewardValue             Int
  rewardUnits             String
  room                    Room                @relation(fields: [roomId], references: [id])

  roomId                  String

  events         Event[]
}

model Event {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  type            EventType
  payload         Json?

  sprint          Sprint?        @relation(fields: [sprintId], references: [id])
  sprintId        String?

  ambassador      Ambassador?    @relation(fields: [ambassadorId], references: [id])
  ambassadorId    String?

  room            Room?          @relation(fields: [roomId], references: [id])
  roomId          String?

  uniqueId        String
}

model AmbassadorRoom {
  id              String              @id @default(uuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  status          AmbassadorStatus    @default(pending)

  room            Room                @relation(fields: [roomId], references: [id])
  roomId          String

  ambassador      Ambassador          @relation(fields: [ambassadorId], references: [id])
  ambassadorId    String

  @@unique([roomId, ambassadorId])
}

enum EventType {
  promoCodeUsage
}

enum RewardType {
  fix
}

enum AmbassadorStatus {
  pending
  approved
  rejected
}
